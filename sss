package main

import (
	"encoding/json"
	"fmt"
	"io/ioutil"
	"log"
	"strings"

	"github.com/go-resty/resty/v2"
	"github.com/robertkrimen/otto"
)

// Struct to represent the Postman Collection JSON
type PostmanCollection struct {
	Info     Info             `json:"info"`
	Variable []VariableDetail `json:"variable"`
	Item     []Item           `json:"item"`
}

// Structs for nested data
type Info struct {
	Name        string `json:"name"`
	Description string `json:"description"`
}

type VariableDetail struct {
	Key   string      `json:"key"`
	Value interface{} `json:"value"`
	Type  string      `json:"type"`
}

type Item struct {
	Name string `json:"name"`
	Item []struct {
		Name    string  `json:"name"`
		Request Request `json:"request"`
	} `json:"item"`
}

type Request struct {
	Method string `json:"method"`
	URL    struct {
		Raw   string   `json:"raw"`
		Host  []string `json:"host"`
		Path  []string `json:"path"`
		Query []struct {
			Key   string `json:"key"`
			Value string `json:"value"`
		} `json:"query"`
	} `json:"url"`
	Header []struct {
		Key   string `json:"key"`
		Value string `json:"value"`
		Type  string `json:"type"`
	} `json:"header"`
	Body struct {
		Mode string `json:"mode"`
		Raw  string `json:"raw"`
	} `json:"body"`
	Event []struct {
		Listen string `json:"listen"`
		Script struct {
			Type string   `json:"type"`
			Exec []string `json:"exec"`
		} `json:"script"`
	} `json:"event"`
}

func main() {
	// Read the Postman Collection JSON file
	data, err := ioutil.ReadFile("postman_collection.json")
	if err != nil {
		log.Fatalf("Failed to read JSON file: %v", err)
	}

	// Parse the JSON into the struct
	var collection PostmanCollection
	if err := json.Unmarshal(data, &collection); err != nil {
		log.Fatalf("Failed to parse JSON: %v", err)
	}

	// Create a new Resty client
	client := resty.New()

	// Initialize the authorization token variable
	var authorizationToken string

	// Iterate over the items in the collection and make requests
	for _, item := range collection.Item {
		for _, subItem := range item.Item {
			// Execute any prerequest scripts
			for _, event := range subItem.Request.Event {
				if event.Listen == "prerequest" {
					// Execute the prerequest script
					vm := otto.New()
					for _, script := range event.Script.Exec {
						if _, err := vm.Run(script); err != nil {
							log.Fatalf("Failed to execute prerequest script: %v", err)
						}
					}

					// Get the authorization token from the JavaScript environment
					value, _ := vm.Get("authorization_token")
					authToken, _ := value.ToString()
					authorizationToken = authToken
				}
			}

			// Set the base URL
			baseURL := getVariableValue("base_url", collection.Variable)

			// Set dynamic headers
			headers := make(map[string]string)
			for _, header := range subItem.Request.Header {
				headers[header.Key] = header.Value
			}
			headers["Authorization"] = authorizationToken

			// Set dynamic request body
			requestBody := subItem.Request.Body.Raw

			// Set the URL
			url := getVariableValue("url", collection.Variable) + subItem.Request.URL.Raw

			// Make the request
			resp, err := client.R().
				SetHeaders(headers).
				SetBody(requestBody).
				Execute(subItem.Request.Method, url)
			if err != nil {
				log.Fatalf("Error making request: %v\n", err)
			}

			// Print the response
			fmt.Println("Response:", resp)
		}
	}
}

// Function to get the value of a variable from the collection
func getVariableValue(key string, variables []VariableDetail) string {
	for _, variable := range variables {
		if variable.Key == key {
			value, ok := variable.Value.(string)
			if !ok {
				log.Fatalf("Invalid value type for variable %s", key)
			}
			return value
		}
	}
	log.Fatalf("Variable %s not found", key)
	return ""
}




package main

import (
	"encoding/json"
	"fmt"
	"io/ioutil"
	"log"
)

// Structs to represent the Postman Collection JSON
type PostmanCollection struct {
	Item []struct {
		Event []struct {
			Listen string `json:"listen"`
			Script struct {
				Type string   `json:"type"`
				Exec []string `json:"exec"`
			} `json:"script"`
		} `json:"event"`
	} `json:"item"`
}

func main() {
	// Read the Postman Collection JSON file
	data, err := ioutil.ReadFile("postman_collection.json")
	if err != nil {
		log.Fatalf("Failed to read JSON file: %v", err)
	}

	// Parse the JSON into the struct
	var collection PostmanCollection
	if err := json.Unmarshal(data, &collection); err != nil {
		log.Fatalf("Failed to parse JSON: %v", err)
	}

	// Iterate over the items in the collection and extract prerequest scripts
	for _, item := range collection.Item {
		for _, event := range item.Event {
			if event.Listen == "prerequest" {
				fmt.Println("Prerequest Script:")
				for _, script := range event.Script.Exec {
					fmt.Println(script)
				}
			}
		}
	}
}




package main

import (
	"encoding/json"
	"fmt"
	"io/ioutil"
	"log"
)

type PostmanEvent struct {
	Listen string `json:"listen"`
	Script struct {
		Type string   `json:"type"`
		Exec []string `json:"exec"`
	} `json:"script"`
}

type PostmanItem struct {
	Name  string          `json:"name"`
	Event []PostmanEvent `json:"event"`
	Item  []PostmanItem  `json:"item"`
}

type PostmanCollection struct {
	Info struct {
		Name        string `json:"name"`
		Description string `json:"description"`
	} `json:"info"`
	Item []PostmanItem `json:"item"`
}

func main() {
	// Read JSON file
	data, err := ioutil.ReadFile("postman_collection.json")
	if err != nil {
		log.Fatalf("Failed to read JSON file: %v", err)
	}

	// Parse JSON into struct
	var collection PostmanCollection
	if err := json.Unmarshal(data, &collection); err != nil {
		log.Fatalf("Failed to parse JSON: %v", err)
	}

	// Traverse the collection items and print prerequest scripts
	traverseItems(collection.Item)
}

func traverseItems(items []PostmanItem) {
	for _, item := range items {
		for _, event := range item.Event {
			if event.Listen == "prerequest" {
				fmt.Println("Prerequest Script for", item.Name+":")
				for _, exec := range event.Script.Exec {
					fmt.Println(exec)
				}
				fmt.Println()
			}
		}
		traverseItems(item.Item)
	}
}
