package main

import (
	"encoding/json"
	"fmt"
	"io/ioutil"
	"log"
	"strings"

	"github.com/robertkrimen/otto"
	"github.com/go-resty/resty/v2"
)

// Struct to represent the Postman Collection JSON
type PostmanCollection struct {
	Info struct {
		Name        string `json:"name"`
		Description string `json:"description"`
	} `json:"info"`
	Item []struct {
		Name string `json:"name"`
		Item []struct {
			Name    string `json:"name"`
			Request struct {
				Method string `json:"method"`
				URL    struct {
					Raw   string   `json:"raw"`
					Host  []string `json:"host"`
					Path  []string `json:"path"`
					Query []struct {
						Key   string `json:"key"`
						Value string `json:"value"`
					} `json:"query"`
				} `json:"url"`
				Header []struct {
					Key   string `json:"key"`
					Value string `json:"value"`
					Type  string `json:"type"`
				} `json:"header"`
				Body struct {
					Mode string `json:"mode"`
					Raw  string `json:"raw"`
				} `json:"body"`
				Event []struct {
					Listen string `json:"listen"`
					Script struct {
						Type string   `json:"type"`
						Exec []string `json:"exec"`
					} `json:"script"`
				} `json:"event"`
			} `json:"request"`
		} `json:"item"`
	} `json:"item"`
}

func main() {
	// Read the Postman Collection JSON file
	data, err := ioutil.ReadFile("postman_collection.json")
	if err != nil {
		log.Fatalf("Failed to read JSON file: %v", err)
	}

	// Parse the JSON into the struct
	var collection PostmanCollection
	if err := json.Unmarshal(data, &collection); err != nil {
		log.Fatalf("Failed to parse JSON: %v", err)
	}

	// Create a new Resty client
	client := resty.New()

	// Iterate over the items in the collection and make requests
	for _, item := range collection.Item {
		for _, subItem := range item.Item {
			// Check if there are any prerequest scripts
			for _, event := range subItem.Request.Event {
				if event.Listen == "prerequest" {
					// Execute the prerequest script
					vm := otto.New()
					for _, script := range event.Script.Exec {
						_, err := vm.Run(script)
						if err != nil {
							log.Fatalf("Failed to execute prerequest script: %v", err)
						}
					}
					// Get the generated authorization token from the JavaScript environment
					value, _ := vm.Get("authorization_token")
					authToken, _ := value.ToString()
					// Set the authorization token in the request headers
					subItem.Request.Header = append(subItem.Request.Header, struct {
						Key   string `json:"key"`
						Value string `json:"value"`
						Type  string `json:"type"`
					}{Key: "Authorization", Value: authToken, Type: "text"})
				}
			}

			request := client.R().
				SetMethod(subItem.Request.Method).
				SetBody(subItem.Request.Body.Raw).
				SetHeader("Content-Type", "application/json")

			// Add headers
			for _, header := range subItem.Request.Header {
				request.SetHeader(header.Key, header.Value)
			}

			// Build the URL
			url := subItem.Request.URL.Raw
			for _, host := range subItem.Request.URL.Host {
				url += host
			}
			for _, path := range subItem.Request.URL.Path {
				url += "/" + path
			}

			// Make the request
			resp, err := request.SetURL(url).Send()
			if err != nil {
				log.Printf("Error making request: %v\n", err)
				continue
			}

			// Print the response
			fmt.Println("Response:", resp.String())
		}
	}
}
