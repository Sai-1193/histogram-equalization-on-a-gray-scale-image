import React, { useState } from 'react';

// Types for the service and test
interface Test {
  testName: string;
}

interface Service {
  serviceName: string;
  tests: Test[];
}

const ServiceForm: React.FC = () => {
  const [services, setServices] = useState<Service[]>([]);
  const [serviceName, setServiceName] = useState<string>(''); // Service name input
  const [tests, setTests] = useState<string>(''); // Comma-separated tests
  const [editingService, setEditingService] = useState<Service | null>(null);

  // Handle the Add or Update action when Enter is pressed
  const handleEnterPress = (e: React.KeyboardEvent<HTMLInputElement>) => {
    if (e.key === 'Enter' && serviceName.trim() !== '') {
      handleSubmit();
    }
  };

  // Add or Edit Service
  const handleSubmit = () => {
    if (editingService) {
      // Update existing service
      setServices(services.map(service =>
        service.serviceName === editingService.serviceName
          ? { ...service, serviceName, tests: [{ testName: tests }] }
          : service
      ));
      setEditingService(null); // Reset editing mode
    } else {
      // Add new service
      setServices([...services, { serviceName, tests: [{ testName: tests }] }]);
    }
    // Clear the form fields after adding/updating
    setServiceName('');
    setTests('');
  };

  // Start editing an existing service
  const handleEdit = (service: Service) => {
    setEditingService(service); // Set the service to edit
    setServiceName(service.serviceName); // Pre-fill service name
    setTests(service.tests.map(test => test.testName).join(', ')); // Pre-fill tests (comma-separated)
  };

  // Delete a service
  const handleDelete = (serviceName: string) => {
    setServices(services.filter(service => service.serviceName !== serviceName));
  };

  return (
    <div>
      {/* Only show service name input when adding a new service */}
      <div>
        <input
          type="text"
          placeholder="Enter service name"
          value={serviceName}
          onChange={(e) => setServiceName(e.target.value)}
          onKeyDown={handleEnterPress} // Handle Enter key press for adding/updating
        />
        <input
          type="text"
          placeholder="Enter tests (comma separated)"
          value={tests}
          onChange={(e) => setTests(e.target.value)}
          onKeyDown={handleEnterPress} // Handle Enter key press for adding/updating
        />
      </div>

      {/* Service List */}
      <ul>
        {services.map((service, index) => (
          <li key={index}>
            <strong>{service.serviceName}</strong>
            <ul>
              {service.tests.map((test, i) => (
                <li key={i}>{test.testName}</li>
              ))}
            </ul>

            {/* Show Edit and Delete buttons only for added services */}
            <button onClick={() => handleEdit(service)}>Edit</button>
            <button onClick={() => handleDelete(service.serviceName)}>Delete</button>
          </li>
        ))}
      </ul>

      {/* Add Service button resets the form */}
      <button onClick={() => setEditingService(null)}>
        Add Service
      </button>
    </div>
  );
};

export default ServiceForm;




import React, { useState } from 'react';

// Types for the service and test
interface Test {
  testName: string;
}

interface Service {
  serviceName: string;
  tests: Test[];
}

const ServiceForm: React.FC = () => {
  const [services, setServices] = useState<Service[]>([]);  // List of services
  const [serviceName, setServiceName] = useState<string>(''); // Service name input
  const [tests, setTests] = useState<string>(''); // Comma-separated tests input
  const [editingService, setEditingService] = useState<Service | null>(null); // To track which service is being edited
  const [open, setOpen] = useState<boolean>(false); // To control if the form is open

  // Function to handle adding a new service
  const addService = () => {
    setOpen(true); // Open the form
    setEditingService(null); // Clear editing mode
  };

  // Add or Edit Service
  const handleSubmit = () => {
    if (serviceName.trim() !== '') {
      const newService: Service = { 
        serviceName, 
        tests: [{ testName: tests }] // Adjust this if you want to handle multiple tests
      };

      setServices((prev) => {
        if (editingService) {
          // If editing an existing service, update it
          return prev.map((service) =>
            service.serviceName === editingService.serviceName
              ? { ...service, serviceName, tests: [{ testName: tests }] }
              : service
          );
        } else {
          // Add a new service
          return [...prev, newService];
        }
      });

      setOpen(false); // Close the form after submission
      setServiceName(''); // Reset the service name
      setTests(''); // Reset tests field
      setEditingService(null); // Reset editing state
    }
  };

  // Start editing an existing service
  const handleEdit = (service: Service) => {
    setEditingService(service); // Set the service to edit
    setServiceName(service.serviceName); // Pre-fill service name
    setTests(service.tests.map(test => test.testName).join(', ')); // Pre-fill tests (comma-separated)
    setOpen(true); // Open the form to allow editing
  };

  // Delete a service
  const handleDelete = (serviceName: string) => {
    setServices(services.filter((service) => service.serviceName !== serviceName));
  };

  return (
    <div>
      {/* Show form for adding or editing a service */}
      {open && (
        <div>
          <input
            type="text"
            placeholder="Enter service name"
            value={serviceName}
            onChange={(e) => setServiceName(e.target.value)}
          />
          <input
            type="text"
            placeholder="Enter tests (comma separated)"
            value={tests}
            onChange={(e) => setTests(e.target.value)}
          />
          <button onClick={handleSubmit}>Submit</button>
          <button onClick={() => setOpen(false)}>Cancel</button>
        </div>
      )}

      {/* Service List */}
      <ul>
        {services.map((service, index) => (
          <li key={index}>
            <strong>{service.serviceName}</strong>
            <ul>
              {service.tests.map((test, i) => (
                <li key={i}>{test.testName}</li>
              ))}
            </ul>

            {/* Show Edit and Delete buttons only for added services */}
            <button onClick={() => handleEdit(service)}>Edit</button>
            <button onClick={() => handleDelete(service.serviceName)}>Delete</button>
          </li>
        ))}
      </ul>

      {/* Add Service button */}
      <button onClick={addService}>Add Service</button>
    </div>
  );
};

export default ServiceForm;






import React, { useState } from 'react';

interface PreReqBodyVar {
  key?: string[];  // The key field is an array of strings
}

const ServiceForm: React.FC = () => {
  const [preReqBodyVars, setPreReqBodyVars] = useState<PreReqBodyVar[]>([]);  // List of preReqBodyVars
  const [keyInput, setKeyInput] = useState<string>(''); // Input field for the key value
  const [editingIndex, setEditingIndex] = useState<number | null>(null); // Index of the item being edited
  const [open, setOpen] = useState<boolean>(false); // Whether the input field is visible

  // Show the input field for adding a new key
  const addService = () => {
    setOpen(true); // Show the input field
    setKeyInput(''); // Reset the input field
    setEditingIndex(null); // Clear any editing state
  };

  // Handle submitting the key (either adding or updating)
  const handleSubmit = () => {
    if (keyInput.trim() !== '') {
      const newKey = keyInput.split(',').map((item) => item.trim()); // Convert input to array

      if (editingIndex !== null) {
        // Editing an existing item
        const updatedPreReqBodyVars = [...preReqBodyVars];
        updatedPreReqBodyVars[editingIndex] = { key: newKey };
        setPreReqBodyVars(updatedPreReqBodyVars);
      } else {
        // Adding a new item
        setPreReqBodyVars((prev) => [...prev, { key: newKey }]);
      }

      // Close the input field and reset the form
      setOpen(false);
      setKeyInput('');
      setEditingIndex(null); // Reset the editing state
    }
  };

  // Start editing an existing item
  const handleEdit = (index: number) => {
    const serviceToEdit = preReqBodyVars[index];
    if (serviceToEdit.key) {
      setKeyInput(serviceToEdit.key.join(', ')); // Pre-fill the input with the current key
      setEditingIndex(index); // Set the index of the item being edited
      setOpen(true); // Show the input field to edit
    }
  };

  // Handle deleting an item
  const handleDelete = (index: number) => {
    setPreReqBodyVars(preReqBodyVars.filter((_, i) => i !== index));
  };

  return (
    <div>
      {/* Show input field to add or edit key */}
      {open && (
        <div>
          <input
            type="text"
            placeholder="Enter key values (comma separated)"
            value={keyInput}
            onChange={(e) => setKeyInput(e.target.value)}
            onKeyDown={(e) => {
              if (e.key === 'Enter') handleSubmit();
            }}
          />
          <button onClick={handleSubmit}>Submit</button>
          <button onClick={() => setOpen(false)}>Cancel</button>
        </div>
      )}

      {/* PreReqBodyVar List */}
      <ul>
        {preReqBodyVars.map((preReqBodyVar, index) => (
          <li key={index}>
            <strong>Key:</strong> {preReqBodyVar.key?.join(', ')}
            <br />
            {/* Show Edit and Delete buttons */}
            <button onClick={() => handleEdit(index)}>Edit</button>
            <button onClick={() => handleDelete(index)}>Delete</button>
          </li>
        ))}
      </ul>

      {/* Add New Service Button */}
      <button onClick={addService}>Add Service</button>
    </div>
  );
};

export default ServiceForm;


import React, { useState } from 'react';

interface BodyVar {
  path: string;
  type?: string;
  values?: string[];
}

const BodyVarForm: React.FC = () => {
  const [bodyVars, setBodyVars] = useState<BodyVar[]>([]); // List of BodyVar objects
  const [pathInput, setPathInput] = useState<string>(''); // Input field for the path
  const [typeInput, setTypeInput] = useState<string>(''); // Input field for the type (optional)
  const [valuesInput, setValuesInput] = useState<string>(''); // Input field for the values (comma separated)
  const [editingPath, setEditingPath] = useState<string | null>(null); // To track the path of the BodyVar being edited
  const [open, setOpen] = useState<boolean>(false); // To control if the form is open

  // Show the input fields for adding a new BodyVar
  const addService = () => {
    setOpen(true); // Show the input fields
    setPathInput(''); // Reset the path input
    setTypeInput(''); // Reset the type input
    setValuesInput(''); // Reset the values input
    setEditingPath(null); // Clear any editing state
  };

  // Handle submitting the BodyVar (either adding or updating)
  const handleSubmit = () => {
    if (pathInput.trim() !== '') {
      const newBodyVar: BodyVar = {
        path: pathInput,
        type: typeInput || undefined, // Type is optional, only include if provided
        values: valuesInput ? valuesInput.split(',').map((item) => item.trim()) : undefined, // Values are optional, split by comma
      };

      if (editingPath) {
        // Editing an existing item
        const updatedBodyVars = bodyVars.map((bodyVar) =>
          bodyVar.path === editingPath ? newBodyVar : bodyVar
        );
        setBodyVars(updatedBodyVars);
      } else {
        // Adding a new item
        setBodyVars((prev) => [...prev, newBodyVar]);
      }

      // Close the input fields and reset the form
      setOpen(false);
      setPathInput('');
      setTypeInput('');
      setValuesInput('');
      setEditingPath(null); // Reset the editing state
    }
  };

  // Start editing an existing BodyVar based on path
  const handleEdit = (path: string) => {
    const bodyVarToEdit = bodyVars.find((bodyVar) => bodyVar.path === path);
    if (bodyVarToEdit) {
      setPathInput(bodyVarToEdit.path);
      setTypeInput(bodyVarToEdit.type || ''); // Pre-fill the type if available
      setValuesInput(bodyVarToEdit.values ? bodyVarToEdit.values.join(', ') : ''); // Pre-fill values if available
      setEditingPath(path); // Set the path of the item being edited
      setOpen(true); // Show the input fields to allow editing
    }
  };

  // Handle deleting a BodyVar
  const handleDelete = (path: string) => {
    setBodyVars(bodyVars.filter((bodyVar) => bodyVar.path !== path));
  };

  return (
    <div>
      {/* Show input fields for adding or editing a BodyVar */}
      {open && (
        <div>
          <input
            type="text"
            placeholder="Enter path"
            value={pathInput}
            onChange={(e) => setPathInput(e.target.value)}
          />
          <input
            type="text"
            placeholder="Enter type (optional)"
            value={typeInput}
            onChange={(e) => setTypeInput(e.target.value)}
          />
          <input
            type="text"
            placeholder="Enter values (comma separated)"
            value={valuesInput}
            onChange={(e) => setValuesInput(e.target.value)}
          />
          <button onClick={handleSubmit}>Submit</button>
          <button onClick={() => setOpen(false)}>Cancel</button>
        </div>
      )}

      {/* BodyVar List - Only show Path with Edit and Delete buttons */}
      <ul>
        {bodyVars.map((bodyVar, index) => (
          <li key={index}>
            <strong>{bodyVar.path}</strong>
            <br />
            {/* Show Edit and Delete buttons */}
            <button onClick={() => handleEdit(bodyVar.path)}>Edit</button>
            <button onClick={() => handleDelete(bodyVar.path)}>Delete</button>
          </li>
        ))}
      </ul>

      {/* Add New BodyVar Button */}
      <button onClick={addService}>Add BodyVar</button>
    </div>
  );
};

export default BodyVarForm;

